// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async discover(
    onEvent: TAURI_CHANNEL<DiscoverEvent>
  ): Promise<Result<null, TpError>> {
    try {
      return {
        status: 'ok',
        data: await TAURI_INVOKE('discover', { onEvent }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async deviceCommand(
    socketAddr: string,
    device: DeviceResponse
  ): Promise<Result<boolean, TpError>> {
    try {
      return {
        status: 'ok',
        data: await TAURI_INVOKE('device_command', { socketAddr, device }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async getDevices(): Promise<[string, DeviceResponse][]> {
    return await TAURI_INVOKE('get_devices');
  },
  async setBrightness(
    socketAddr: string,
    device: DeviceResponse,
    brightness: number
  ): Promise<Result<SysInfo, TpError>> {
    try {
      return {
        status: 'ok',
        data: await TAURI_INVOKE('set_brightness', {
          socketAddr,
          device,
          brightness,
        }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

export type DeviceResponse = { system: System };
export type DiscoverEvent =
  | 'Start'
  | { Progress: number }
  | 'End'
  | { Error: string };
/**
 * Error response for a section of the JSON response
 */
export type SectionError = {
  /**
   * The error code. Zero if no error.
   */
  err_code: number | null;
  /**
   * The error message.
   */
  err_msg: string | null;
};
export type SysInfo = {
  alias: string;
  brightness: number | null;
  deviceId: string;
  err_code: number;
  hwId: string;
  hw_type: string;
  hw_ver: string;
  latitude_i: number | null;
  longitude_i: number | null;
  mac: string;
  model: string;
  on_time: number | null;
  relay_state: number | null;
  rssi: number;
  sw_ver: string;
  updating: number | null;
};
export type System = { get_sysinfo: SysInfo };
/**
 * Error type for TPLinker
 */
export type TpError =
  /**
   * Wrapped errors from std::io
   */
  | { IO: string }
  /**
   * Wrapped errors from serde_json
   */
  | { Serde: string }
  /**
   * Error decoding a section of the JSON response
   */
  | { TPLink: SectionError }
  /**
   * A generic error
   */
  | { Other: string };

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from '@tauri-apps/api/core';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';
import { type WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow';

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: 'ok'; data: T }
  | { status: 'error'; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case 'listen':
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case 'once':
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case 'emit':
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}
